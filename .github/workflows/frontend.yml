name: Frontend CI/CD

on:
  workflow_run:
    workflows: ["Common CI"]
    types:
      - completed
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '강제 배포 (변경사항 확인 생략)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: '테스트 건너뛰기 (빠른 배포용)'
        required: false
        default: false
        type: boolean
      skip_e2e:
        description: 'E2E 테스트 건너뛰기'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22.x'

jobs:
  # 변경사항 확인 및 프론트엔드 빌드 결정
  check-changes:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.ref }}
          fetch-depth: 2

      - name: 프론트엔드 변경사항 확인
        id: check
        run: |
          # 수동 트리거이면서 강제 배포 옵션이 활성화된 경우
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_deploy }}" == "true" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Manual trigger with force deploy - skipping change detection"
            exit 0
          fi
          
          # 수동 트리거인 경우 항상 실행
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - running frontend workflow"
            exit 0
          fi
          
          # 자동 트리거인 경우 변경사항 확인
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $changed_files"
          
          # 프론트엔드 관련 파일이 변경되었는지 확인
          if echo "$changed_files" | grep -E "(^frontend/|^shared/|^package\.json$|^\.github/workflows/)" > /dev/null; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "No frontend changes detected"
          fi

  # 프론트엔드 빌드, 테스트, 린트
  frontend:
    needs: check-changes
    if: fromJSON(needs.check-changes.outputs.should-run)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Shared 모듈 빌드
        run: npm run shared:build

      - name: 프론트엔드 린트 검사
        if: ${{ !inputs.skip_tests }}
        run: npm run frontend:lint

      - name: 프론트엔드 테스트
        if: ${{ !inputs.skip_tests }}
        run: npm run frontend:test

      - name: 프론트엔드 빌드
        run: npm run frontend:build

      - name: 빌드 아티팩트 저장
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  # 프론트엔드 배포 (main 브랜치만)
  deploy-frontend:
    needs: [check-changes, frontend]
    if: ${{ (github.event.workflow_run.head_branch == 'main' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')) && fromJSON(needs.check-changes.outputs.should-run) && needs.frontend.result == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
      
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 의존성 설치
        run: npm ci
      
      - name: Shared 모듈 빌드
        run: npm run shared:build
      
      - name: 프론트엔드 빌드 (배포용)
        run: npm run frontend:build
      
      - name: GitHub Pages 설정
        uses: actions/configure-pages@v4
      
      - name: 빌드 결과물 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/dist'
      
      - name: GitHub Pages에 배포
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 프론트엔드 배포 완료 알림
        run: |
          echo "🎉 프론트엔드 GitHub Pages 배포 완료!"
          echo "📱 배포 URL: ${{ steps.deployment.outputs.page_url }}"

  # E2E 테스트 (프론트엔드 배포 완료 후)
  e2e-tests:
    needs: [deploy-frontend]
    if: ${{ needs.deploy-frontend.result == 'success' && !inputs.skip_e2e }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Playwright 설치
        run: npx playwright install --with-deps

      - name: 배포된 사이트 접근성 확인
        run: |
          SITE_URL="${{ needs.deploy-frontend.outputs.page_url || 'https://hands-on-vibe-coding.github.io/handson-vibecoding-demo/' }}"
          echo "🌐 배포된 사이트 URL: $SITE_URL"
          
          # 사이트 접근성 확인 (최대 5분 대기)
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
              echo "✅ 사이트 접근 가능 (시도 $i/30)"
              break
            else
              echo "⏳ 사이트 접근 대기 중... (시도 $i/30)"
              sleep 10
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ 사이트 접근 실패 - E2E 테스트를 중단합니다"
              exit 1
            fi
          done

      - name: 배포된 사이트 E2E 테스트 실행
        run: |
          export PLAYWRIGHT_BASE_URL="${{ needs.deploy-frontend.outputs.page_url || 'https://hands-on-vibe-coding.github.io/handson-vibecoding-demo/' }}"
          echo "🎭 E2E 테스트 시작 - 테스트 대상: $PLAYWRIGHT_BASE_URL"
          
          # Linux 스냅샷 존재 여부 확인
          if [ -z "$(find e2e/visual.spec.ts-snapshots -name '*-linux.png' 2>/dev/null)" ]; then
            echo "📸 Linux 환경용 스냅샷이 없습니다. 새로 생성합니다..."
            npx playwright test --update-snapshots
            
            # 생성된 스냅샷 확인
            echo "💾 생성된 스냅샷 목록:"
            ls -la e2e/visual.spec.ts-snapshots/*-linux.png || echo "스냅샷 생성 실패"
          else
            echo "🔍 기존 스냅샷과 비교하여 테스트 실행..."
            npm run test:e2e
          fi
        working-directory: frontend

      - name: Linux 스냅샷 저장 (생성된 경우)
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: linux-snapshots
          path: frontend/e2e/visual.spec.ts-snapshots/*-linux.png
          if-no-files-found: ignore
          retention-days: 30

      - name: 테스트 실패 시 스크린샷 저장
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: frontend/test-results/
          retention-days: 7

      - name: E2E 테스트 완료 알림
        run: |
          echo "🎭 E2E 테스트 완료!"
          echo "✅ 배포된 사이트에서 모든 기능이 정상 동작합니다."