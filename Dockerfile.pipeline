# 파이프라인용 멀티스테이지 Dockerfile

# Stage 1: Build and Deploy Backend
FROM node:22-alpine AS backend-deploy

WORKDIR /app

# AWS CLI 설치
RUN apk add --no-cache aws-cli jq

# Copy source code
COPY package*.json ./
COPY backend/ ./backend/
COPY shared/ ./shared/

# Install dependencies and build
RUN npm ci
RUN npm run shared:build
RUN npm run backend:build

# Deploy CDK and extract endpoints
RUN cd backend && \
    npx cdk deploy --all --require-approval never --outputs-file cdk-outputs.json

# Extract API endpoints
RUN API_ENDPOINT=$(jq -r '.TodoAppApiStack.ApiEndpoint' backend/cdk-outputs.json) && \
    IDENTITY_POOL_ID=$(jq -r '.TodoAppAuthStack.IdentityPoolId' backend/cdk-outputs.json) && \
    echo "VITE_API_BASE_URL=$API_ENDPOINT" > /tmp/env.vars && \
    echo "VITE_COGNITO_IDENTITY_POOL_ID=$IDENTITY_POOL_ID" >> /tmp/env.vars && \
    echo "VITE_API_REGION=ap-northeast-2" >> /tmp/env.vars && \
    echo "VITE_COGNITO_REGION=ap-northeast-2" >> /tmp/env.vars && \
    echo "VITE_USE_LOCAL_STORAGE=false" >> /tmp/env.vars

# Stage 2: Build Frontend with extracted endpoints
FROM node:22-alpine AS frontend-build

WORKDIR /app

# Copy environment variables from previous stage
COPY --from=backend-deploy /tmp/env.vars ./frontend/.env

# Copy source code
COPY package*.json ./
COPY frontend/ ./frontend/
COPY shared/ ./shared/

# Install dependencies and build
RUN npm ci
RUN npm run shared:build
RUN npm run frontend:build

# Stage 3: Production runtime
FROM nginx:alpine AS production

# Copy built frontend
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html

# Copy custom nginx config if needed
# COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]