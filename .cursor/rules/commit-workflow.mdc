---
description: 
globs: 
alwaysApply: false
---
# 커밋 워크플로우 가이드

## 변경사항 확인 및 커밋 절차

1. **변경사항 확인**
   ```bash
   # 전체 변경사항 확인
   git status
   
   # 각 파일별 변경 내용 확인
   git diff
   
   # 특정 파일의 변경 내용 확인
   git diff <파일명>
   ```

2. **변경사항 그룹화**
   - 동일한 작업 내용별로 변경사항을 그룹화
   - 예시 그룹:
     - 문서화 관련 변경
     - 코드 리팩토링
     - 기능 추가
     - 버그 수정
     - 테스트 코드
     - 설정 파일 변경

3. **순차적 커밋**
   ```bash
   # 1. 문서화 변경사항 커밋
   git add docs/
   git commit -m "docs: 문서 업데이트"
   
   # 2. 코드 리팩토링 커밋
   git add src/
   git commit -m "refactor: 코드 구조 개선"
   
   # 3. 기능 추가 커밋
   git add src/features/
   git commit -m "feat: 새로운 기능 추가"
   ```

## 커밋 메시지 규칙

1. **커밋 타입**
   - `feat`: 새로운 기능
   - `fix`: 버그 수정
   - `docs`: 문서 변경
   - `style`: 코드 포맷팅
   - `refactor`: 코드 리팩토링
   - `test`: 테스트 코드
   - `chore`: 빌드/설정 변경

2. **커밋 메시지 형식**
   ```
   <타입>: <설명>
   
   - 변경 내용 1
   - 변경 내용 2
   ```

3. **예시**
   ```
   feat: 사용자 인증 기능 추가
   
   - 로그인 폼 구현
   - JWT 토큰 처리
   - 인증 상태 관리
   ```

## 주의사항

1. **작업 단위 분리**
   - 하나의 커밋은 하나의 작업 단위만 포함
   - 관련 없는 변경사항은 별도 커밋으로 분리

2. **변경사항 검토**
   - 커밋 전 `git diff`로 변경 내용 재확인
   - 불필요한 변경사항 제외

3. **커밋 순서**
   - 문서화 → 리팩토링 → 기능 추가 → 버그 수정
   - 의존성이 있는 변경사항은 순서 고려

4. **커밋 전 확인사항**
   - 변경사항이 의도한 대로인지 확인
   - 테스트가 통과하는지 확인
   - 린트 규칙을 준수하는지 확인
