---
description: 
globs: 
alwaysApply: true
---
# 코딩 표준 가이드

## 일반 원칙

1. **코드 스타일**
   - ESLint와 Prettier를 사용한 일관된 코드 스타일
   - TypeScript의 타입 시스템 활용
   - 명확한 변수명과 함수명 사용

2. **아키텍처 원칙**
   - [아키텍처 개요](mdc:docs/design/architecture.md)에 따른 구조 준수
   - Clean Architecture 원칙 적용
   - SOLID 원칙 준수

## 프론트엔드 표준

1. **컴포넌트 구조**
   - [프론트엔드 설계](mdc:docs/design/frontend.md)에 따른 컴포넌트 구현
   - 재사용 가능한 컴포넌트 설계
   - Props 타입 정의 필수

2. **상태 관리**
   - React Context API 사용
   - 커스텀 훅을 통한 로직 분리
   - 불필요한 리렌더링 방지

## 백엔드 표준

1. **API 설계**
   - [백엔드 설계](mdc:docs/design/backend.md)에 따른 API 구현
   - RESTful API 원칙 준수
   - 에러 처리 표준화

2. **인프라 코드**
   - [인프라 설계](mdc:docs/design/infrastructure.md)에 따른 리소스 구성
   - CDK를 사용한 인프라 코드화
   - 환경별 설정 분리

## 보안 표준

1. **인증/인가**
   - [보안 설계](mdc:docs/design/security.md)에 따른 구현
   - Cognito를 통한 사용자 인증
   - API Gateway 권한 설정

2. **데이터 보안**
   - 민감 정보 암호화
   - 최소 권한 원칙 적용
   - 보안 모범 사례 준수

## 모니터링 및 최적화

1. **로깅**
   - [모니터링 설계](mdc:docs/design/monitoring.md)에 따른 로깅 구현
   - 구조화된 로그 포맷 사용
   - 적절한 로그 레벨 설정

2. **성능 최적화**
   - [비용 최적화](mdc:docs/design/optimization.md)에 따른 리소스 최적화
   - Lambda 함수 최적화
   - DynamoDB 쿼리 최적화

자세한 구현 가이드라인은 [구현 계획](mdc:docs/design/implementation.md)을 참조하세요.
